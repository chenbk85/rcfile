"=========== Meta ============
"StrID : 38
"Title : Linux 内核模块编程指南
"Cats  : Uncategorized
"Tags  : 
"========== Content ==========
http://tldp.org/LDP/lkmpg/2.6/html/lkmpg.html

这本书是最初接触linux内核看到的，虽然比不上一些经典之作，但是却也是一本非常不错的入门参考资料。特翻译一下。
<h1>1.介绍</h1>
<h2>1.1什么是内核模块？</h2>
So, you want to write a kernel module.  You know C, you've written a few normal programs to run as processes, and now 	you want to get to where the real action is, to where a single wild pointer can wipe out your file system and a core dump 	means a reboot.

那么，你想写一个内核模块，你知道C，你写过一些程序，它们以进程的形式运行，并且你想知道到底发生了什么，一个野指针可以毁掉你的文件系统，XXX

What exactly is a kernel module?  Modules are pieces of code that can be loaded and unloaded into the kernel upon 	demand.  They extend the functionality of the kernel without the need to reboot the system.  For example, one type of module 	is the device driver, which allows the kernel to access hardware connected to the system.  Without modules, we would have to 	build monolithic kernels and add new functionality directly into the kernel image.  Besides having larger kernels, this has 	the disadvantage of requiring us to rebuild and reboot the kernel every time we want new functionality.

内核模块到底是什么？模块是一些代码，可以按需从内核动态加载和卸载。它们可以不用重启系统而扩充内核的功能。举个例子，一类模块是设备驱动程序，他允许内核访问机器上面的硬件。没有模块，我们必须构建一个XXX内核，添加新功能进去。除此之外，每次我们想添加新功能的时候，我们就必须重新build内核，并且重启。
<h2>1.2内核模块如何加载进内核？</h2>
You can see what modules are already loaded into the kernel by running <strong>lsmod</strong>, which gets its 	information by reading the file <tt>/proc/modules</tt>.

你可以通过lsmod命令看到现在已经加载到内核的模块，它是从/proc/modules获得的信息。

How do these modules find their way into the kernel?  When the kernel needs a feature that is not resident in the 	kernel, the kernel module daemon kmod<a name="AEN62"></a> execs modprobe to load the module in.  modprobe is passed a string in one of two forms:
<ul>
	<li>A module name like <tt>softdog</tt> or <tt>ppp</tt>.</li>
	<li>A more generic identifier like <tt>char-major-10-30</tt>.</li>
</ul>
这些模块是怎么加载内核的？当内核需要一个新特性，内核模块守护进程 kmod 执行 modprobe 将模块加载进来。传给modprobe的参数有两种形式：
<ul>
	<li>模块名，像： softdog 或者 ppp</li>
	<li>更加通用的标识符，像：char-major-10-30</li>
</ul>
If modprobe is handed a generic identifier, it first looks for that string in the file 	<tt>/etc/modprobe.conf</tt>.<a name="AEN74"></a> If it finds an alias line like:

alias char-major-10-30 softdog
<div style="text-align: left;"><span style="line-height: 24px; font-size: 16px;">it knows that the generic identifier refers to the module <tt>softdog.ko</tt>.</span></div>
<div style="text-align: left;">如果 modprobe 处理XXX，它会在 /etc/modprobe.conf 中找到如下别名：</div>
<div style="text-align: left;"><span style="line-height: 24px; font-size: 16px;">
</span></div>

Next, modprobe looks through the file <tt>/lib/modules/version/modules.dep</tt>, to see if other modules 	must be loaded before the requested module may be loaded.  This file is created by <strong>depmod -a</strong> and  	contains module dependencies. For example, <tt>msdos.ko</tt> requires the <tt>fat.ko</tt> module  	to be already loaded into the kernel. The requested module has a dependency on another module if the other module defines  	symbols	(variables or functions) that the requested module uses.

接下来，modprobe 通过 /lib/modules/version/modules.dep 查找这个文件来获得当前模块的依赖。这个文件可以通过*depmod -a* 来生成.举个例子，msdos.ko 需要 fat.ko 已经加载。被依赖的模块可能包含当前模块所需的变量，函数等。

Lastly, modprobe uses insmod to first load any prerequisite modules into the kernel, and then the requested module. 	modprobe directs insmod to <tt>/lib/modules/version/</tt><a name="AEN87"></a>, the standard directory for modules.  insmod is  	intended to be fairly dumb about the location of modules, whereas modprobe is aware of the default location of modules, 	knows how to figure out the dependencies and load the modules in the right order. 	So for example,	if you wanted to load the msdos module, you'd have to either run:

最后，modprobe调用insmod先把所依赖的模块加载进来，然后加载当前模块。


<table border="1" width="100%" bgcolor="#e0e0e0">
<tbody>
<tr>
<td><span style="color: #000000;">
<pre>insmod /lib/modules/2.6.11/kernel/fs/fat/fat.ko
insmod /lib/modules/2.6.11/kernel/fs/msdos/msdos.ko</pre>
</span></td>
</tr>
</tbody>
</table>
or:
<table border="1" width="100%" bgcolor="#e0e0e0">
<tbody>
<tr>
<td><span style="color: #000000;">
<pre>modprobe msdos</pre>
</span></td>
</tr>
</tbody>
</table>
What we've seen here is: <strong> insmod </strong> requires you to pass it the full pathname and to insert the modules 	in the right order, while <strong> modprobe </strong> just takes the name, without any extension, and figures out 	all it needs to know by parsing <tt>/lib/modules/version/modules.dep</tt>.

Linux distros provide modprobe, insmod and depmod as a package called module-init-tools. In previous versions 	that package was called modutils. Some distros also set up some wrappers that allow both packages to be installed 	in parallel and do the right thing in order to be able to deal with 2.4 and 2.6 kernels. Users should not need to care 	about the details, as long as they're running recent versions of those tools.
 
Linux 发行版提供了module-init-tools包，其中包含了 modprobe,insmod和depmod. 之前的版本中，这个包叫做 modutils.一些发行版封装了这两个包，这样这两个包可以同时存在,从而可以服务与2.4和2.6内核,用户可以不用关心这些细节。

Now you know how modules get into the kernel.  There's a bit more to the story if you want to write your own modules 	which depend on other modules (we calling this `stacking modules').  But this will have to wait for a future chapter.  	We have	a lot to cover before addressing this relatively high-level issue.

现在你知道模块是怎么加载到内核之中了。如果你自己的内核模块依赖于其他的模块，还有一些其他的小故事.但是这将会在以后的章节讲述。我们在这个相对高级的主题上有很多其他的问题要讲。


Chapter 1. Introduction
1.1. What Is A Kernel Module?

So, you want to write a kernel module. You know C, you've written a few normal programs to run as processes, and now you want to get to where the real action is, to where a single wild pointer can wipe out your file system and a core dump means a reboot.

What exactly is a kernel module? Modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. Without modules, we would have to build monolithic kernels and add new functionality directly into the kernel image. Besides having larger kernels, this has the disadvantage of requiring us to rebuild and reboot the kernel every time we want new functionality.
1.2. How Do Modules Get Into The Kernel?

You can see what modules are already loaded into the kernel by running lsmod, which gets its information by reading the file /proc/modules.

How do these modules find their way into the kernel? When the kernel needs a feature that is not resident in the kernel, the kernel module daemon kmod[1] execs modprobe to load the module in. modprobe is passed a string in one of two forms:

    *

      A module name like softdog or ppp.
    *

      A more generic identifier like char-major-10-30.

If modprobe is handed a generic identifier, it first looks for that string in the file /etc/modprobe.conf.[2] If it finds an alias line like:

alias char-major-10-30 softdog
	

it knows that the generic identifier refers to the module softdog.ko.

Next, modprobe looks through the file /lib/modules/version/modules.dep, to see if other modules must be loaded before the requested module may be loaded. This file is created by depmod -a and contains module dependencies. For example, msdos.ko requires the fat.ko module to be already loaded into the kernel. The requested module has a dependency on another module if the other module defines symbols (variables or functions) that the requested module uses.

Lastly, modprobe uses insmod to first load any prerequisite modules into the kernel, and then the requested module. modprobe directs insmod to /lib/modules/version/[3], the standard directory for modules. insmod is intended to be fairly dumb about the location of modules, whereas modprobe is aware of the default location of modules, knows how to figure out the dependencies and load the modules in the right order. So for example, if you wanted to load the msdos module, you'd have to either run:

insmod /lib/modules/2.6.11/kernel/fs/fat/fat.ko
insmod /lib/modules/2.6.11/kernel/fs/msdos/msdos.ko
	

or:

modprobe msdos
	

What we've seen here is: insmod requires you to pass it the full pathname and to insert the modules in the right order, while modprobe just takes the name, without any extension, and figures out all it needs to know by parsing /lib/modules/version/modules.dep.

Linux distros provide modprobe, insmod and depmod as a package called module-init-tools. In previous versions that package was called modutils. Some distros also set up some wrappers that allow both packages to be installed in parallel and do the right thing in order to be able to deal with 2.4 and 2.6 kernels. Users should not need to care about the details, as long as they're running recent versions of those tools.

Now you know how modules get into the kernel. There's a bit more to the story if you want to write your own modules which depend on other modules (we calling this `stacking modules'). But this will have to wait for a future chapter. We have a lot to cover before addressing this relatively high-level issue.


1.2.1. Before We Begin

Before we delve into code, there are a few issues we need to cover. Everyone's system is different and everyone has their own groove. Getting your first "hello world" program to compile and load correctly can sometimes be a trick. Rest assured, after you get over the initial hurdle of doing it for the first time, it will be smooth sailing thereafter.

1.2.1 开始之前
编码之前，还有一些问题需要清楚。每个人的系统都不一样，每个人的习惯也不相同。编译成功并且正确加载XXX。XXX，在解决了最初的难题之后，以后将会变得简单。

1.2.1.1. Modversioning

A module compiled for one kernel won't load if you boot a different kernel unless you enable CONFIG_MODVERSIONS in the kernel. We won't go into module versioning until later in this guide. Until we cover modversions, the examples in the guide may not work if you're running a kernel with modversioning turned on. However, most stock Linux distro kernels come with it turned on. If you're having trouble loading the modules because of versioning errors, compile a kernel with modversioning turned off.

1.2.1.1 版本
模块只在编译的版本的内核上面运行，除非内核允许 CONFIG_MODVERSIONS。 我们会在后面讲到模块的版本号。我们XXX，这个指南上的例子可能不能运行在 modversioning 开启的内核上。然而大多数linux发行版都将其开启了。如果遇到了因为版本不同造成的不能加载的问题，编译一个关闭 modversioning 的内核。


1.2.1.2. Using X

It is highly recommended that you type in, compile and load all the examples this guide discusses. It's also highly recommended you do this from a console. You should not be working on this stuff in X.

Modules can't print to the screen like printf() can, but they can log information and warnings, which ends up being printed on your screen, but only on a console. If you insmod a module from an xterm, the information and warnings will be logged, but only to your log files. You won't see it unless you look through your log files. To have immediate access to this information, do all your work from the console.

1.2.1.2 使用X

非常建议你输入，编译，加载这个指南中的所有代码示例。同样非常建议你通过 console 来完成而不要通过X来完成。

模块不能通过像printf()一样向屏幕输出，但是它们可以记录信息和警告，XXX，仅仅是在Console。当从xterm中挂载模块，记录只会记录在日志文件上。只能通过访问日志文件来查看这些信息了。想立刻就可以看到这些信息，只能在console中完成所有的任务。

1.2.1.3. Compiling Issues and Kernel Version

Very often, Linux distros will distribute kernel source that has been patched in various non-standard ways, which may cause trouble.

A more common problem is that some Linux distros distribute incomplete kernel headers. You'll need to compile your code using various header files from the Linux kernel. Murphy's Law states that the headers that are missing are exactly the ones that you'll need for your module work.

1.2.1.3 编译问题以及内核版本

linux发行版经常会发布一些经过非标准修改过的内核源码，这可能会引起问题。

一个更常见的问题是一些linux发行版发布了不完整的内核头（kernel headers）。你需要引用各种Linux头文件来编译的代码.XXX缺少的内核头经常是你的模块所需要的。

To avoid these two problems, I highly recommend that you download, compile and boot into a fresh, stock Linux kernel which can be downloaded from any of the Linux kernel mirror sites. See the Linux Kernel HOWTO for more details.

为了避免这两个问题，我强烈建议你下载，编译你自己的Linux内核。可以找到Linux内核的HOWTO获得更多细节。

Ironically, this can also cause a problem. By default, gcc on your system may look for the kernel headers in their default location rather than where you installed the new copy of the kernel (usually in /usr/src/. This can be fixed by using gcc's -I switch.

讽刺的是，这也可能引起问题。


