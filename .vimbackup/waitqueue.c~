#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/wait.h>
#include <linux/kthread.h>
#include <linux/sched.h>
#include <linux/timer.h>

#define MODULE_NAME "test wait_queue"

static struct timer_list my_timer;
int func()
{
	lock_kernel();
	{
		current->flags |= PF_NOFREEZE;
		daemonize(MODULE_NAME);
		allow_signal(SIGKILL|SIGSTOP);
	}
	unlock_kernel();

	printk("declare the wait queue in the thread\n");
	DECLARE_WAIT_QUEUE_HEAD(queue);
	DEFINE_WAIT(wait);

	while (1) {
		/* code */
		add_wait_queue(&queue,&wait);
		prepare_to_wait(&queue,&wait,TASK_INTERRUPTIBLE)

		if(signal_pending(current)) {
			printk("handle the signal\n");
		}

		schedule();

		finish_wait(&queue,&wait);
	}

}

void my_timer_func(unsigned long data)
{
	printk("timer:5555-%d\n",data);
	printk("timer:my timer func fired!\n");
	send_sig_info(SIGABRT,&thread);
	setup_timer(&my_timer,my_timer_func,++data);
	ret = mod_timer(&my_timer, jiffies + msecs_to_jiffies(2000) );
	if (ret) printk("Error in mod_timer\n");
	printk("my timer func fired!\n");
}

int init_module()
{
	printk("module inited!\n");
	printk("let try the wait_queue\n");

	printk("init the timer\n");
	init_timer(&my_timer);
	my_timer.expires = jiffies + msecs_to_jiffies(2000);
	my_timer.data=0;
	my_timer.function=my_timer_func;
	add_timer(&my_timer);
	/*kthread_run(func,NULL,MODULE_NAME);*/
}

void cleanup_module()
{
	printk("this module uninstalling\n");
	int error;
	error = del_timer(&my_timer);
	if(error) printk("the timer was already in use\n");

	printk("this module uninstalled\n");
}




