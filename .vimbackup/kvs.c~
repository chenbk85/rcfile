#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/kthread.h>

#include <linux/errno.h>
#include <linux/types.h>

#include <linux/netdevice.h>
#include <linux/ip.h>
#include <linux/in.h>

#include <linux/smp_lock.h>
#include <linux/delay.h>
#include <linux/un.h>
#include <linux/unistd.h>
#include <linux/wait.h>
#include <linux/ctype.h>
#include <asm/unistd.h>
#include <net/sock.h>
#include <net/tcp.h>
#include <net/inet_connection_sock.h>
#include <net/request_sock.h>

#include <kvs.h>

static struct kvs_vs_struct *vs;
static struct kvs_scheduler *schd_head;
static struct kvs_scheduler *schd_lcc;
static struct kvs_scheduler *schd_content;

int vs_init()
{
	vs = kmalloc(sizeof(struct kvs_vs_struct),GFP_KERNEL);
}

int schedulers_init()
{
	/*set up the built-in schedulers*/
	schd_head = kmalloc(sizeof(*schd_head),GFP_KERNEL);
	INIT_LIST_HEAD(&schd_head->list);

	schd_lcc->name = kstrdup("lc",GFP_KERNEL);
	schd_lcc->schedule=kvs_scheduler_lcc;
	list_add_tail(&schd_lcc->list,&schd_head->list);

	schd_content->name=kstrdup("content",GFP_KERNEL);
	schd_lcc->schedule=kvs_scheduler_content;
	list_add_tail(&schd_content->list,&schd_head->list);

	vs->kvs_scheduler_count = 2;
	vs->schedulers=schd_head;
}

int config_init()
{
	struct kvs_svc_item *svc = kmalloc(sizeof(*svc),GFP_KERNEL);
	svc->svc_name="MAP";
	/*set up the servers*/

	struct kvs_svc_svr *svr = kmalloc(sizeof(*svr),GFP_KERNEL);
	


	struct kvs_svc_rules *rule = kmalloc(sizeof(*rule),GFP_KERNEL);
	rule->url=0;
	rule->field_value=kstrdup("pragma",GFP_KERNEL);
	svc->port = 9999;
	
	/*TODO:it should load the config here*/
}

int svr_monitor_init()
{
	/*
	 * ping the destination servers in every service
	 * monitor the health of the destination server
	 */
	return 1;
}

int ha_init()
{
	/*make the kvs high available*/
	return 1;
}

int init_module()
{
	vs_init();

	schedulers_init();

	config_init(); /*load the config*/

	ktcp_server_init(); /*start the tcp server */

	svr_monitor_init(); /*monitor the destination server */

	ha_init(); /*high available for kvs*/
}

void cleanup_module()
{
	ktcp_server_stop();
	svr_monitor_stop();
	ha_stop();
	vs_stop();
}

MODULE_AUTHOR("lijin liu<llj098@gmail.com>");
MODULE_LICENSE("GPL");
