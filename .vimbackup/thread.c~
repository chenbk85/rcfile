#include <linux/kernel.h>
#include <linux/kthread.h>
#include <linux/module.h>
#include <linux/sched.h>
#include <linux/wait.h>
#include <linux/smp_lock.h>
#include <linux/timer.h>

#define MODULE_NAME "singal test"

static struct task_struct *thread;
static struct timer_list my_timer;

int my_thread(void *data)
{
	printk("my thread fired!\n");
	set_current_state(TASK_INTERRUPTIBLE);

	schedule();
	if(signal_pending(current))
		printk("has signal!\n");

	printk("wake up\n");
	
	return 0;
}

void my_timer_func(unsigned int data)
{
	send_sig_info(SIGALRM,1,thread);
	printk("The singal has been sent!\n");
}

int init_module()
{
	thread = kthread_run(my_thread,NULL,MODULE_NAME);
	init_timer(&my_timer);
	my_timer.data=0;
	my_timer.function=my_timer_func;
	my_timer.expires=jiffies+msecs_to_jiffies(5000);

	add_timer(&my_timer);
	
	return 1;
}

void cleanup_module()
{
	printk("do some cleanup_module\n");
	int error;
	error = del_timer(&my_timer);
	if(error) printk("the timer is still in use");

	if(thread!=NULL)
	{
		kthread_stop(thread);
	}
}
